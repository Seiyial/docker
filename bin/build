#!/usr/bin/env bash

set -e

root=$(cd $(dirname ${0})/../; pwd)
source ${root}/bin/source/argsf
source ${root}/bin/source/utils

#
# CLI header
#
function show_header() {
  header=${1:-"directus builder"}
  details=${2:-""}
  has_details=false
  if [ "${details}" != "" ]; then
    has_details=true
  fi

  set +e
  has_figlet=false
  command -v figlet > /dev/null 2>&1
  if [ "$?" == "0" ]; then
    has_figlet=true
  fi
  set -e

  contents=""
  if [ ${has_figlet} == true ]; then
    if [ ${has_details} == true ]; then
      contents="$(figlet ${header})\n\n> ${details}\n"
    else
      contents="$(figlet ${header})\n"
    fi
  else
    if [ ${has_details} == true ]; then
      contents="$(printf ">\n> [ ${header} ]\n>\n> ${details}\n>")\n"
    else
      contents="$(printf ">\n> [ ${header} ]\n>\n")\n"
    fi
  fi

  echo -e "\e[32m${contents}\e[0m"
}


#
# Build core help
#
function build_core_help() {
  echo "
    Performs builds of core images.
    NOTE: Core images should be already available/pulled.

    Usage:

      build --type core --kind apache --version v1.2.3

    Options:

      Required:

        --kind <kind>         The kind of image to build. For example: apache
        --version <version>   The output images version. Semver compatible strings
                              will output multiple images tags for major minor patch
                              and prerelease.

      Optional:

        --image <image>       The base image name to use. This does NOT include tags.
                              [default: directus/core]

    Flags:

      --help                Shows this screen.
      --push                Push the output images after each build.
                            [default: not set]
  " | cut -c 5-
}

#
# Builds core images
#
function build_core() {
  kind=$(argument kind)
  image=$(argument image directus/core)
  version=$(argument version)
  push=$(flagd push)

  if ! [ -d $root/images/core/${kind}/ ]; then
    >&2 echo "Unknown core: ${kind}"
    return 1
  fi

  show_header "build:core" "kind='${kind}', version='${version}'"

  build_image="core-${kind}-temp:${version}"
  output_images=$(make_tags ${image} ${kind} ${version})

  docker build -t "${build_image}" $root/images/core/${kind}/

  echo "Tags = ${output_images}"

  for image in $output_images
  do
    echo "Tagging ${image}"
    docker tag "${build_image}" "${image}"
    if [ $push == true ]; then
      docker push ${image}
    fi
  done

  docker image rm "${build_image}"
}

#
# Build base help
#
function build_base_help() {
  echo "
    Performs builds of base images.
    NOTE: Core images should be already available/pulled.

    Usage:

      build --type base --kind apache --version v1.2.3

    Options:

      Required:

        --kind <kind>         The kind of image to build. For example: apache
        --project <project>   The project name. For example: api
        --version <version>   The output images version. Semver compatible strings
                              will output multiple images tags for major minor patch
                              and prerelease.

      Optional:

        --core <image>        The core image the base image should use.
                              [default: directus/core:\${version}/\${kind}]
        --image <image>       The base image name to use. This does NOT include tags.
                              [default: directus/base]

    Flags:

      --help                Shows this screen.
      --push                Push the output images after each build.
                            [default: not set]
  " | cut -c 5-
}

#
# Builds base images
#
function build_base() {
  kind=$(argument kind)
  version=$(argument version)
  core=$(argument core directus/core:${version}-${kind})
  project=$(argument project)
  image=$(argument image directus/base)
  push=$(flagd push)

  if ! [ -d $root/images/base/${project}/ ]; then
    echo "Unknown project: ${project}"
    return 1
  fi

  if ! [ -d $root/images/base/${project}/${kind}/ ]; then
    echo "Unknown project kind: ${project}/${kind}"
    return 1
  fi

  show_header "build:base" "project='${project}', kind='${kind}', version='${version}'"

  build_image="${project}-${kind}-temp:${version}"
  output_images=$(make_tags ${image} ${project}-${kind} ${version})

  docker build --build-arg CORE_IMAGE="${core}" -t "${build_image}" "$root/images/base/${project}/${kind}/"

  echo "Tags = ${output_images}"

  for image in $output_images
  do
    echo Tagging ${image}
    docker tag "${build_image}" "${image}"
    if [ $push == true ]; then
      docker push ${image}
    fi
  done

  docker image rm "${build_image}"
}

#
# Builds dist help
#
function build_dist_help() {
  echo "
    Performs builds of dist images.
    NOTE: Core and base images should be already available/pulled.

    Usage:

      build --type dist --project app --kind node --base test --version v7.10.0

    Options:

      Required:

        --kind <kind>         The kind of image to build. For example: apache
        --project <project>   The project name. For example: api

      Optional:

        --version <version>   The project version to fetch and build.
                              [default: latest]
        --ref <ref>           The git reference (can be a commit, a branch name or a tag).
                              [default: \${version}]
        --base <base>         The base image version to use.
                              [default: latest]
        --repository <repo>   The GitHub repository to fetch from (format: user/repo).
                              This can also be a local machine folder containing the git
                              repository.
                              [default: directus/\${project}]
        --base-image <image>  The base image the base image should use.
                              [default: directus/base:\${base}-\${project}-\${kind}]
        --dist-image <image>  The dist image name.
                              [default: directus/\${project}]
        --channel <channel>   The channel to add to the image tags (stable, unstable,
                              canary).
                              [default: ""]
        --hotfix <id>         The build is a docker adjustment and a build should be
                              appended to the end of the tag.
                              [default: ""]

    Flags:

      --help                Shows this screen.
      --push                Push the output images after each build.
                            [default: not set]
      --fresh               Fetches a clean repository and build from it. Takes longer.
                            [default: not set]
  " | cut -c 5-
}

#
# Builds dist images
#
function build_dist() {
  kind=$(argument kind)
  base=$(argument base latest)
  project=$(argument project)
  version=$(argument version "")
  ref=$(argument ref "${version}")
  repository=$(argument repository "directus/${project}")
  base_image=$(argument base-image "directus/base:${base}-${project}-${kind}")
  dist_image=$(argument dist-image "${repository}")
  push=$(flagd push)
  fresh=$(flagd fresh)
  channel=$(argument channel "")
  hotfix=$(argument hotfix "")

  if [ "${base_image}" == "directus/base:latest-${project}-${kind}" ]; then
    base=$(fetch_latest_release directus/docker)
    base_image="directus/base:${base}-${project}-${kind}"
  fi

  is_dir=false
  if [ -d "${repository}" ]; then
    is_dir=true
  elif ! [[ $repository =~ ^[_a-zA-Z0-9-]+/[_a-zA-Z0-9-]+$ ]]; then
    echo "Invalid repository name: '${repository}'"
    return 1
  fi

  if [ $is_dir == false ]; then
    if [ "${version}" == "" ]; then
      version=$(fetch_latest_release ${repository})
      if [ "${ref}" == "" ]; then
        ref="${version}"
      fi
    fi

    repository_url="https://github.com/${repository}.git"
    workdir="./temp/${repository}/${ref}/"

    if [ $fresh == true ]; then
      if [ -d "${workdir}" ]; then
        rm -rf "${workdir}"
      fi
      git clone --quiet "$repository_url" "${workdir}"
    else
      if ! [ -d "${workdir}" ]; then
        git clone --quiet "$repository_url" "${workdir}"
      fi
    fi
  else
    if [ "${version}" == "" ]; then
      echo "Please set a version when working with local repositories"
      exit 1
    fi

    repository_url="$(git remote get-url origin)"
    workdir="${repository}"
  fi

  cd "${workdir}"

  if [ "${channel}" != "" ]; then
    version=${version}-${channel}
  fi

  if [ "${hotfix}" != "" ]; then
    version=${version}+hotfix-${hotfix}
  fi

  show_header "build:dist" "project='${project}', version='${version}', kind='${kind}', base='${base}', repo='${repository}', ref='${ref}'"

  if [ $is_dir == false ]; then
    repository_data=$(git ls-remote ${repository_url} -q ${ref} 2> /dev/null)
    if [ "${repository_data}" == "" ]; then
      if [ "$(git cat-file -t ${ref} 2> /dev/null)" == "commit" ]; then
        repository_from="commit"
        repository_commit="$(git rev-parse ${ref})"
      else
        echo "Invalid repository ref: ${ref}"
        return 1
      fi
    else
      repository_ref=$(echo ${repository_data} | awk '{print $2}')
      repository_commit=$(echo ${repository_data} | awk '{print $1}')
      if [[ $repository_ref =~ ^refs/heads/.* ]]; then
        repository_from="branch"
      elif [[ $repository_ref =~ ^refs/tags/.* ]]; then
        repository_from="tag"
      else
        echo "Unknown repository reference: ${ref}"
        return 1
      fi
    fi
  else
    repository_ref="local"
    repository_from="local"
    repository_commit="local"
  fi

  echo "Building ${dist_image}:${version}-${kind} using a ${repository_from} (commit ${repository_commit})"
  echo ""

  if [ $is_dir == false ]; then
    git fetch --all
    git checkout ${repository_commit}
  fi

  temp_image="temp-${project}-${kind}:${repository_commit:0:8}"
  image_path_kind="./docker/${kind}/Dockerfile"
  image_path_root="./Dockerfile"

  if ! [ -f ".dockerignore" ]; then
    echo "**/.git" >> ".dockerignore"
    echo "**/.vscode" >> ".dockerignore"
  fi

  if [ -f "${image_path_kind}" ]; then
    docker build --build-arg BASE_IMAGE=${base_image} -t ${temp_image} -f ${image_path_kind} .
  elif [ -f "${image_path_root}" ]; then
    docker build --build-arg BASE_IMAGE=${base_image} -t ${temp_image} -f ${image_path_root} .
  else
    echo "FROM ${base_image}" | docker build -t ${temp_image} -f - .
  fi

  output_images=$(make_tags ${dist_image} ${kind} ${version})

  echo "Tags = ${output_images}"

  for image in $output_images
  do
    echo Tagging ${image}
    docker tag "${temp_image}" "${image}"
    if [ $push == true ]; then
      docker push ${image}
    fi
  done

  docker image rm ${temp_image}
}

#
# Build all help
#
function build_all_help() {
  echo "
    Performs builds for all core and base image available.
    The base images from this build will always reference the core images from
    the same build. Use \"build --type base\" if you want to point base images
    to a different core image.

    Usage:

      build --type all --version v1.0.0
      build --type all --version 1.2.3-pre --image_core user/directus-core
      build --type all --version test1 --image_base user/directus-base
      build --type all \\
            --version test2 \\
            --image_core user/directus-core \\
            --image_base user/directus-base

    Options:

      --version <version>   The output images version. Semver compatible strings
                            will output multiple images tags for major minor patch
                            and prerelease.
      --image-core <image>  The image namespace/name to use for core images.
                            [default: directus/core]
      --image-base <image>  The image namespace/name to use for base images.
                            [default: directus/base]

    Flags:

      --help                Shows this screen.
      --push                Push the output images after each build.
                            [default: not set]
  " | cut -c 5-
}

#
# Builds all images
#
function build_all() {
  image_core=$(argument image-core directus/core)
  image_base=$(argument image-core directus/base)
  version=$(argument version)

  push=$(flagd push)
  if [ $push == true ]; then
    push="--push"
  else
    push=""
  fi

  #
  # Build core images
  #
  for kind in apache node
  do
    ${root}/bin/build \
      --type core \
      --image ${image_core} \
      --kind ${kind} \
      --version ${version} \
      ${push}
  done

  #
  # Build base images
  #
  for project in `find "${root}/images/base/" -mindepth 1 -maxdepth 1 -type d -print`
  do
    project=$(basename ${project})
    for kind in `find "${root}/images/base/${project}" -mindepth 1 -maxdepth 1 -type d -print`
    do
      kind=$(basename ${kind})
      ${root}/bin/build \
        --type base \
        --core ${image_core}:${version}-${kind} \
        --kind ${kind} \
        --version ${version} \
        --project ${project} \
        ${push}
    done
  done
}

#
# Bootstrap help
#
function main_help() {
  echo "
    Performs directus image builds.

    Usage:

      build --type (all|core|base|dist)

    Options:
      --help          Shows this screen.
      --type <type>   Which type of build to perform.

  " | cut -c 5-
}

#
# Bootstrap
#
function main() {
  type=$(argument type "")
  help=$(flagd help)

  if [ $help == true ] && [ "$type" == "" ]; then
    show_header "directus"
    main_help
    exit 0
  fi

  set +e
  declare -f build_${type} > /dev/null
  result=$?
  set -e

  if [ $help == true ]; then
    build_${type}_help
    exit 0
  fi

  if [ "$result" == "0" ]; then
    build_${type}
    exit $?
  fi

  show_header "directus"
  main_help
  return 1
}

main
exit $?
