#!/usr/bin/env bash

set -e

root=$(cd $(dirname ${0})/../; pwd)
source ${root}/bin/source/argsf
source ${root}/bin/source/utils

#
# CLI header
#
function show_header() {
  header=${1:-"directus builder"}
  details=${2:-""}
  has_details=false
  if [ "${details}" != "" ]; then
    has_details=true
  fi

  set +e
  has_figlet=false
  command -v figlet > /dev/null 2>&1
  if [ "$?" == "0" ]; then
    has_figlet=true
  fi
  set -e

  contents=""
  if [ ${has_figlet} == true ]; then
    if [ ${has_details} == true ]; then
      contents="$(figlet ${header})\n\n> ${details}\n"
    else
      contents="$(figlet ${header})\n"
    fi
  else
    if [ ${has_details} == true ]; then
      contents="$(printf ">\n> [ ${header} ]\n>\n> ${details}\n>")\n"
    else
      contents="$(printf ">\n> [ ${header} ]\n>\n")\n"
    fi
  fi

  echo -e "\e[32m${contents}\e[0m"
}

#
# Builds dist help
#
function build_help() {
  echo "
    Performs builds of images.

    Usage:

      build --version v8.0.0

    Options:

      Optional:

        --kind <kind>         The kind of image to build. For example: apache
                              [default: apache]
        --version <version>   The project version to fetch and build.
                              [default: latest]
        --ref <ref>           The git reference (can be a commit, a branch name or a tag).
                              [default: \${version}]
        --repository <repo>   The GitHub repository to fetch from (format: user/repo).
                              This can also be a local machine folder containing the git
                              repository.
                              [default: directus/directus]
        --image <image>       The image name.
                              [default: directus/directus]
        --channel <channel>   The channel to add to the image tags (stable, unstable,
                              canary).
                              [default: ""]
        --hotfix <id>         The build is a docker adjustment and a build should be
                              appended to the end of the tag.
                              [default: ""]

    Flags:

      --help                Shows this screen.
      --push                Push the output images after each build.
                            [default: not set]
      --fresh               Fetches a clean repository and build from it. Takes longer.
                            [default: not set]
  " | cut -c 5-
}

#
# Builds dist images
#
function build() {
  kind=$(argument kind "apache")
  version=$(argument version "")
  ref=$(argument ref "${version}")
  repository=$(argument repository "directus/directus")
  image=$(argument image "${repository}")
  push=$(flagd push)
  fresh=$(flagd fresh)
  channel=$(argument channel "")
  hotfix=$(argument hotfix "")
  context_dir="${root}/images/${kind}"

  is_dir=false
  if [ -d "${repository}" ]; then
    is_dir=true
  elif ! [[ $repository =~ ^[_a-zA-Z0-9-]+/[_a-zA-Z0-9-]+$ ]]; then
    echo "Invalid repository name: '${repository}'"
    return 1
  fi

  if [ $is_dir == false ]; then
    if [ "${version}" == "" ]; then
      version=$(fetch_latest_release ${repository})
      if [ "${ref}" == "" ]; then
        ref="${version}"
      fi
    fi

    repository_url="https://github.com/${repository}.git"
    repository_dir=$(realpath "./temp/${repository}/${ref}")

    if [ $fresh == true ]; then
      if [ -d "${repository_dir}" ]; then
        rm -rf "${repository_dir}"
      fi
      git clone --quiet "$repository_url" "${repository_dir}"
    else
      if ! [ -d "${repository_dir}" ]; then
        git clone --quiet "$repository_url" "${repository_dir}"
      fi
    fi
  else
    if [ "${version}" == "" ]; then
      echo "Please set a version when working with local repositories"
      exit 1
    fi

    repository_url="$(git remote get-url origin)"
    repository_dir=$(realpath "${repository}")
  fi

  cd "${repository_dir}"

  if [ "${channel}" != "" ]; then
    version=${version}-${channel}
  fi

  if [ "${hotfix}" != "" ]; then
    version=${version}+hotfix-${hotfix}
  fi

  show_header "build" "version='${version}', kind='${kind}', repo='${repository}', ref='${ref}'"

  if [ $is_dir == false ]; then
    repository_data=$(git ls-remote ${repository_url} -q ${ref} 2> /dev/null)
    if [ "${repository_data}" == "" ]; then
      if [ "$(git cat-file -t ${ref} 2> /dev/null)" == "commit" ]; then
        repository_from="commit"
        repository_commit="$(git rev-parse ${ref})"
      else
        echo "Invalid repository ref: ${ref}"
        return 1
      fi
    else
      repository_ref=$(echo ${repository_data} | awk '{print $2}')
      repository_commit=$(echo ${repository_data} | awk '{print $1}')
      if [[ $repository_ref =~ ^refs/heads/.* ]]; then
        repository_from="branch"
      elif [[ $repository_ref =~ ^refs/tags/.* ]]; then
        repository_from="tag"
      else
        echo "Unknown repository reference: ${ref}"
        return 1
      fi
    fi
  else
    repository_ref="local"
    repository_from="local"
    repository_commit="local"
  fi

  echo "Building ${image}:${version}-${kind} using a ${repository_from} (commit ${repository_commit})"
  echo ""

  if [ $is_dir == false ]; then
    git fetch --all
    git checkout ${repository_commit}
  fi

  if ! [ -f ".dockerignore" ]; then
    echo "**/.git" >> ".dockerignore"
    echo "**/.vscode" >> ".dockerignore"
  fi

  cd "${root}"

  if [ -e "./context" ]; then
    rm -rf ./context
  fi
  mkdir -p ./context

  cp -ra "${context_dir}/." "./context/"
  ln -s -f "${repository_dir}" "./context/directus"

  temp_image="temp-directus-${kind}:${repository_commit:0:8}"
  docker build -t ${temp_image} ./context

  images=$(make_tags ${image} ${kind} ${version})

  echo "Tags = ${images}"

  for image in $images
  do
    echo Tagging ${image}
    docker tag "${temp_image}" "${image}"
    if [ $push == true ]; then
      docker push ${image}
    fi
  done

  docker image rm ${temp_image}
}

#
# Build all help
#
function build_all_help() {
  echo "
    Performs builds for all core and base image available.
    The base images from this build will always reference the core images from
    the same build. Use \"build --type base\" if you want to point base images
    to a different core image.

    Usage:

      build --type all --version v1.0.0
      build --type all --version 1.2.3-pre --image_core user/directus-core
      build --type all --version test1 --image_base user/directus-base
      build --type all \\
            --version test2 \\
            --image_core user/directus-core \\
            --image_base user/directus-base

    Options:

      --version <version>   The output images version. Semver compatible strings
                            will output multiple images tags for major minor patch
                            and prerelease.
      --image-core <image>  The image namespace/name to use for core images.
                            [default: directus/core]
      --image-base <image>  The image namespace/name to use for base images.
                            [default: directus/base]

    Flags:

      --help                Shows this screen.
      --push                Push the output images after each build.
                            [default: not set]
  " | cut -c 5-
}

#
# Builds all images
#
function build_all() {
  image_core=$(argument image-core directus/core)
  image_base=$(argument image-core directus/base)
  version=$(argument version)

  push=$(flagd push)
  if [ $push == true ]; then
    push="--push"
  else
    push=""
  fi

  #
  # Build core images
  #
  for kind in apache node
  do
    ${root}/bin/build \
      --type core \
      --image ${image_core} \
      --kind ${kind} \
      --version ${version} \
      ${push}
  done

  #
  # Build base images
  #
  for project in `find "${root}/images/base/" -mindepth 1 -maxdepth 1 -type d -print`
  do
    project=$(basename ${project})
    for kind in `find "${root}/images/base/${project}" -mindepth 1 -maxdepth 1 -type d -print`
    do
      kind=$(basename ${kind})
      ${root}/bin/build \
        --type base \
        --core ${image_core}:${version}-${kind} \
        --kind ${kind} \
        --version ${version} \
        --project ${project} \
        ${push}
    done
  done
}

#
# Bootstrap
#
function main() {
  help=$(flagd help)

  if [ $help == true ]; then
    show_header "directus"
    build_help
    exit 0
  fi

  if [ $help == true ]; then
    build_help
    exit 0
  fi

  build
  exit $?
}

main
exit $?
